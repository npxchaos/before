{
  "name": "3_AI_Visibility_Tracker",
  "nodes": [
    {
      "type": "n8n-nodes-base.webhook",
      "name": "Receive AI Visibility",
      "parameters": {
        "path": "ai-visibility",
        "options": {
          "headerAuth": true
        }
      }
    },
    {
      "type": "n8n-nodes-base.httpRequest",
      "name": "Log Webhook Run Start",
      "parameters": {
        "url": "={{$env.SUPABASE_URL}}/rest/v1/webhook_runs",
        "method": "POST",
        "headers": {
          "apikey": "={{$env.SUPABASE_SERVICE_ROLE}}",
          "Authorization": "=Bearer {{$env.SUPABASE_SERVICE_ROLE}}",
          "Content-Type": "application/json"
        },
        "body": {
          "submission_id": "={{$json.submission_id}}",
          "workflow_id": "={{$workflow.id}}",
          "workflow_name": "AI Visibility",
          "status": "started",
          "request": "={{$json}}"
        }
      }
    },
    {
      "type": "n8n-nodes-base.function",
      "name": "Generate Queries",
      "parameters": {
        "functionCode": `
          const url = new URL($input.first().json.url);
          const queries = [];

          // Domain-based queries
          queries.push({
            type: 'domain',
            query: url.hostname.replace('www.', '')
          });

          // Path-based queries
          const pathSegments = url.pathname.split('/')
            .filter(Boolean)
            .filter(s => s.length > 3); // Skip short segments

          if (pathSegments.length > 0) {
            queries.push({
              type: 'path',
              query: pathSegments.join(' ')
            });
          }

          // Add plan-specific queries
          const planQueries = {
            'free': 1,
            'pro': 3,
            'enterprise': 5
          };

          return queries.slice(0, planQueries[$input.first().json.plan_tier || 'free']);
        `
      }
    },
    {
      "type": "n8n-nodes-base.httpRequest",
      "name": "Check Search Visibility",
      "parameters": {
        "url": "=https://api.search-results.com/v1/search",
        "method": "POST",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {
          "timeout": 30000,
          "retry": {
            "count": 3,
            "maxTimeout": 10000
          }
        },
        "body": {
          "query": "={{$json.query}}",
          "engines": ["google", "bing", "duckduckgo"],
          "country": "us",
          "language": "en",
          "device": "desktop"
        }
      }
    },
    {
      "type": "n8n-nodes-base.httpRequest",
      "name": "Save Snapshot",
      "parameters": {
        "url": "={{$env.SUPABASE_URL}}/rest/v1/visibility_snapshots",
        "method": "POST",
        "headers": {
          "apikey": "={{$env.SUPABASE_SERVICE_ROLE}}",
          "Authorization": "=Bearer {{$env.SUPABASE_SERVICE_ROLE}}",
          "Content-Type": "application/json"
        },
        "body": {
          "submission_id": "={{$json.submission_id}}",
          "url": "={{$json.url}}",
          "query": "={{$json.query}}",
          "engines": "={{$json.results}}"
        }
      }
    },
    {
      "type": "n8n-nodes-base.function",
      "name": "Calculate Visibility Score",
      "parameters": {
        "functionCode": `
          const snapshots = $input.all().map(i => i.json);
          
          // Calculate per-engine scores
          const engineScores = snapshots.map(snap => {
            const scores = Object.entries(snap.engines).map(([engine, results]) => {
              // Find best position
              const position = results.find(r => r.url.includes(snap.url))?.position || 100;
              // Score based on position (1st = 100, 2nd = 95, 3rd = 90, etc.)
              return Math.max(0, 100 - ((position - 1) * 5));
            });
            return Math.max(...scores);
          });
          
          // Average all scores
          const score = Math.round(
            engineScores.reduce((sum, score) => sum + score, 0) / engineScores.length
          );
          
          return {
            result_aeo: {
              snapshots: snapshots.map(s => ({
                query: s.query,
                engines: s.engines
              })),
              score
            }
          };
        `
      }
    },
    {
      "type": "n8n-nodes-base.httpRequest",
      "name": "Update Results",
      "parameters": {
        "url": "={{$env.SUPABASE_URL}}/rest/v1/submissions?id=eq.{{$json.submission_id}}",
        "method": "PATCH",
        "headers": {
          "apikey": "={{$env.SUPABASE_SERVICE_ROLE}}",
          "Authorization": "=Bearer {{$env.SUPABASE_SERVICE_ROLE}}",
          "Content-Type": "application/json"
        },
        "body": {
          "result_aeo": "={{$json.result_aeo}}",
          "progress": 75
        }
      }
    },
    {
      "type": "n8n-nodes-base.httpRequest",
      "name": "Log Webhook Run Complete",
      "parameters": {
        "url": "={{$env.SUPABASE_URL}}/rest/v1/webhook_runs?id=eq.{{$json.webhook_run_id}}",
        "method": "PATCH",
        "headers": {
          "apikey": "={{$env.SUPABASE_SERVICE_ROLE}}",
          "Authorization": "=Bearer {{$env.SUPABASE_SERVICE_ROLE}}",
          "Content-Type": "application/json"
        },
        "body": {
          "status": "completed",
          "response": "={{$json}}",
          "duration_ms": "={{Date.now() - new Date($json.started_at).getTime()}}"
        }
      }
    },
    {
      "type": "n8n-nodes-base.httpRequest",
      "name": "Log Error",
      "parameters": {
        "url": "={{$env.SUPABASE_URL}}/rest/v1/webhook_runs?id=eq.{{$json.webhook_run_id}}",
        "method": "PATCH",
        "headers": {
          "apikey": "={{$env.SUPABASE_SERVICE_ROLE}}",
          "Authorization": "=Bearer {{$env.SUPABASE_SERVICE_ROLE}}",
          "Content-Type": "application/json"
        },
        "body": {
          "status": "failed",
          "error_code": "={{$error.type}}",
          "error_message": "={{$error.message}}",
          "duration_ms": "={{Date.now() - new Date($json.started_at).getTime()}}"
        }
      }
    }
  ],
  "connections": {
    "Receive AI Visibility": {
      "main": [["Log Webhook Run Start"]]
    },
    "Log Webhook Run Start": {
      "main": [["Generate Queries"]],
      "error": [["Log Error"]]
    },
    "Generate Queries": {
      "main": [["Check Search Visibility"]],
      "error": [["Log Error"]]
    },
    "Check Search Visibility": {
      "main": [["Save Snapshot"]],
      "error": [["Log Error"]]
    },
    "Save Snapshot": {
      "main": [["Calculate Visibility Score"]],
      "error": [["Log Error"]]
    },
    "Calculate Visibility Score": {
      "main": [["Update Results"]],
      "error": [["Log Error"]]
    },
    "Update Results": {
      "main": [["Log Webhook Run Complete"]],
      "error": [["Log Error"]]
    }
  }
}
